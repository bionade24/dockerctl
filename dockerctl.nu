#!/usr/bin/env -S nu --stdin

use std [assert]

let DOCKERCTL_PATH = "/etc/dockerctl"
let COMPOSE_BIN = "docker-compose"

let pass_cmds = ["start", "stop", "restart", "ps", "up", "kill", "pull", "push", "rm", "pause", "unpause", "images", "port", "logs"]
let deviate_cmds = [[orig deviation]; ["up" "up -d"],]

def exec [compose_path: path, cmds?: string] {
  assert ($compose_path | path exists)
  cd $compose_path # FIXME: Use --compose-yaml-path of docker-compose
  let services = ^$COMPOSE_BIN config --services | lines # TODO: use  do {docker-compose config --services} | complete | select stdout

  print "Which service do you want to choose?: \n"
  print $services
  # TODO: Try input list for interactive selection
  let service_nr = (input --numchar 2 "Enter the number of the service: " | into int)
  if $service_nr < 1 or $service_nr > ($services | length) {
    print -e "Error: Specified index doesn't match to a container in that service!"
    exit 1 # TODO: Re-ask & try
  }
  if not cmds {
    let cmds = (input "Command to execute: ")
  }
  ^$COMPOSE_BIN exec $services.$service_nr $cmds
}

def add [dest: path, orig?: path] {
  assert ($dest | path dirname | path exists)
  if not $orig {
    let orig = pwd
  } else {
    let orig_pdata = $orig | path parse
    if not ($orig_pdata | is-empty extension) {
      let orig = $orig_pdata.parent
    }
  }
  let ret = do { ^ln -s $orig $dest | complete}
}

def remove [compose_path: path] {
  assert ($compose_path | path exists)
  rm $compose_path
}

def edit [compose_path: path, show: bool = true] {
  assert ($compose_path | path exists)
  let compose_yamls = ls ($compose_path + "docker-compose.y*ml")
  if (compose_yamls | length) != 1 {
    if (compose_name | length) > 1 {
      print -e "Error: Too many compose yamls in directory" $compose_yamls
    } else {
      print -e "Error: No docker-compose.y(a)ml in " + $compose_path + " found"
    }
    exit 1
  }
  mut editor = vi
  if not $show {
    editor = "less"
  } else {
    editor = $env.VISUAL
    editor = $env.EDITOR
    ^$editor ($compose_path | path join $compose_yamls.0.name)
  }
}

def show [compose_path: path] {
  edit compose_path true
}

def create [compose_path: path] {
  mkdir compose_path
  "#This is a autogenerated compose-yaml by dockerctl" | save ($compose_path | path join "docker-compose.yml")
  edit compose_path
}

def update [] {
  ^$COMPOSE_BIN pull
  ^$COMPOSE_BIN up -d
}

def --env main [
          command: string
          compose_name: string
          --version (-v)
          --list (-l)
          --path (-p): path
          ...additional_args: string
         ] {
  if $version {
    print "hahah"
    exit 0
  }
  if not ($DOCKERCTL_PATH | path exists) {
    try {
      mkdir $DOCKERCTL_PATH
    } catch {
      print -e ("Could not create dockerctl config path under: " + $DOCKERCTL_PATH)
    }
  }
  let compose_path = do {
    if not ($path == null) {
      $path | path expand
    } else {
      $DOCKERCTL_PATH | path join $compose_name
    }
  }
  cd $compose_path
  mut compose_cmd = ""
  if $command in $pass_cmds {
    compose_cmd = $command
  } else if ( $command in $deviate_cmds.orig ) {
    compose_cmd = $deviate_cmds | get $command
  } else {
    $command
  }
  if $additional_args {
    ^$COMPOSE_BIN $compose_cmd $additional_args
  } else {
    ^$COMPOSE_BIN $compose_cmd
  }
}
